// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.7.1
// source: bcs/ledger/xledger/xldgpb/xledger.proto

package xldgpb

import (
	protos "github.com/SuperconsensusMatrixchain/matrixcore/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionStatus int32

const (
	// Undefined status
	TransactionStatus_TX_UNDEFINE TransactionStatus = 0
	// Transaction not exist
	TransactionStatus_TX_NOEXIST TransactionStatus = 1
	// Transaction have been confirmed
	TransactionStatus_TX_CONFIRM TransactionStatus = 2
	// Transaction is on the furcation
	TransactionStatus_TX_FURCATION TransactionStatus = 3
	// Transaction have not been confirmed
	TransactionStatus_TX_UNCONFIRM TransactionStatus = 4
	// Transaction occurs error
	TransactionStatus_TX_FAILED TransactionStatus = 5
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TX_UNDEFINE",
		1: "TX_NOEXIST",
		2: "TX_CONFIRM",
		3: "TX_FURCATION",
		4: "TX_UNCONFIRM",
		5: "TX_FAILED",
	}
	TransactionStatus_value = map[string]int32{
		"TX_UNDEFINE":  0,
		"TX_NOEXIST":   1,
		"TX_CONFIRM":   2,
		"TX_FURCATION": 3,
		"TX_UNCONFIRM": 4,
		"TX_FAILED":    5,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[0].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[0]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{0}
}

// BlockStatus is the status of block
type BlockStatus int32

const (
	BlockStatus_BLOCK_ERROR   BlockStatus = 0
	BlockStatus_BLOCK_TRUNK   BlockStatus = 1
	BlockStatus_BLOCK_BRANCH  BlockStatus = 2
	BlockStatus_BLOCK_NOEXIST BlockStatus = 3
)

// Enum value maps for BlockStatus.
var (
	BlockStatus_name = map[int32]string{
		0: "BLOCK_ERROR",
		1: "BLOCK_TRUNK",
		2: "BLOCK_BRANCH",
		3: "BLOCK_NOEXIST",
	}
	BlockStatus_value = map[string]int32{
		"BLOCK_ERROR":   0,
		"BLOCK_TRUNK":   1,
		"BLOCK_BRANCH":  2,
		"BLOCK_NOEXIST": 3,
	}
)

func (x BlockStatus) Enum() *BlockStatus {
	p := new(BlockStatus)
	*p = x
	return p
}

func (x BlockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[1].Descriptor()
}

func (BlockStatus) Type() protoreflect.EnumType {
	return &file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[1]
}

func (x BlockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStatus.Descriptor instead.
func (BlockStatus) EnumDescriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{1}
}

// QCState is the phase of hotstuff
type QCState int32

const (
	QCState_NEW_VIEW   QCState = 0
	QCState_PREPARE    QCState = 1
	QCState_PRE_COMMIT QCState = 2
	QCState_COMMIT     QCState = 3
	QCState_DECIDE     QCState = 4
)

// Enum value maps for QCState.
var (
	QCState_name = map[int32]string{
		0: "NEW_VIEW",
		1: "PREPARE",
		2: "PRE_COMMIT",
		3: "COMMIT",
		4: "DECIDE",
	}
	QCState_value = map[string]int32{
		"NEW_VIEW":   0,
		"PREPARE":    1,
		"PRE_COMMIT": 2,
		"COMMIT":     3,
		"DECIDE":     4,
	}
)

func (x QCState) Enum() *QCState {
	p := new(QCState)
	*p = x
	return p
}

func (x QCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QCState) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[2].Descriptor()
}

func (QCState) Type() protoreflect.EnumType {
	return &file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes[2]
}

func (x QCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QCState.Descriptor instead.
func (QCState) EnumDescriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{2}
}

// QCSignInfos is the signs of the leader gathered from replicas of a specifically certType.
// A slice of signs is used at present.
// TODO @qizheng09: It will be change to Threshold-Signatures after
// Crypto lib support Threshold-Signatures.
type QCSignInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QCSignInfos
	QCSignInfos []*SignInfo `protobuf:"bytes,1,rep,name=QCSignInfos,proto3" json:"QCSignInfos,omitempty"`
}

func (x *QCSignInfos) Reset() {
	*x = QCSignInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QCSignInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSignInfos) ProtoMessage() {}

func (x *QCSignInfos) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSignInfos.ProtoReflect.Descriptor instead.
func (*QCSignInfos) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{0}
}

func (x *QCSignInfos) GetQCSignInfos() []*SignInfo {
	if x != nil {
		return x.QCSignInfos
	}
	return nil
}

// SignInfo is the signature information of the
type SignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Sign      []byte `protobuf:"bytes,3,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *SignInfo) Reset() {
	*x = SignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInfo) ProtoMessage() {}

func (x *SignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInfo.ProtoReflect.Descriptor instead.
func (*SignInfo) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{1}
}

func (x *SignInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SignInfo) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SignInfo) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

// QuorumCert is a data type that combines a collection of signatures from replicas.
type QuorumCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of Proposal this QC certified.
	ProposalId []byte `protobuf:"bytes,1,opt,name=ProposalId,proto3" json:"ProposalId,omitempty"`
	// The msg of Proposal this QC certified.
	ProposalMsg []byte `protobuf:"bytes,2,opt,name=ProposalMsg,proto3" json:"ProposalMsg,omitempty"`
	// The current type of this QC certified.
	// the type contains `NEW_VIEW`, `PREPARE`
	Type QCState `protobuf:"varint,3,opt,name=Type,proto3,enum=xldgpb.QCState" json:"Type,omitempty"`
	// The view number of this QC certified.
	ViewNumber int64 `protobuf:"varint,4,opt,name=ViewNumber,proto3" json:"ViewNumber,omitempty"`
	// SignInfos is the signs of the leader gathered from replicas
	// of a specifically certType.
	SignInfos *QCSignInfos `protobuf:"bytes,5,opt,name=SignInfos,proto3" json:"SignInfos,omitempty"`
}

func (x *QuorumCert) Reset() {
	*x = QuorumCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumCert) ProtoMessage() {}

func (x *QuorumCert) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumCert.ProtoReflect.Descriptor instead.
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{2}
}

func (x *QuorumCert) GetProposalId() []byte {
	if x != nil {
		return x.ProposalId
	}
	return nil
}

func (x *QuorumCert) GetProposalMsg() []byte {
	if x != nil {
		return x.ProposalMsg
	}
	return nil
}

func (x *QuorumCert) GetType() QCState {
	if x != nil {
		return x.Type
	}
	return QCState_NEW_VIEW
}

func (x *QuorumCert) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *QuorumCert) GetSignInfos() *QCSignInfos {
	if x != nil {
		return x.SignInfos
	}
	return nil
}

type HDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HDPublickey
	HdPublicKey []byte `protobuf:"bytes,1,opt,name=hd_public_key,json=hdPublicKey,proto3" json:"hd_public_key,omitempty"`
	// original_hash
	OriginalHash []byte `protobuf:"bytes,2,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (x *HDInfo) Reset() {
	*x = HDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDInfo) ProtoMessage() {}

func (x *HDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDInfo.ProtoReflect.Descriptor instead.
func (*HDInfo) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{3}
}

func (x *HDInfo) GetHdPublicKey() []byte {
	if x != nil {
		return x.HdPublicKey
	}
	return nil
}

func (x *HDInfo) GetOriginalHash() []byte {
	if x != nil {
		return x.OriginalHash
	}
	return nil
}

// Unified Xuper Signature
type XuperSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	Signature  []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *XuperSignature) Reset() {
	*x = XuperSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XuperSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XuperSignature) ProtoMessage() {}

func (x *XuperSignature) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XuperSignature.ProtoReflect.Descriptor instead.
func (*XuperSignature) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{4}
}

func (x *XuperSignature) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *XuperSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Transaction is the information of the transaction
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// txid is the id of this transaction
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// the blockid the transaction belong to
	Blockid []byte `protobuf:"bytes,2,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// Transaction input list
	TxInputs []*protos.TxInput `protobuf:"bytes,3,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	// Transaction output list
	TxOutputs []*protos.TxOutput `protobuf:"bytes,4,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	// Transaction description or system contract
	Desc []byte `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// Mining rewards
	Coinbase bool `protobuf:"varint,7,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Random number used to avoid replay attacks
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp to launch the transaction
	Timestamp int64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// tx format version; tx格式版本号
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	// auto generated tx
	Autogen          bool                    `protobuf:"varint,11,opt,name=autogen,proto3" json:"autogen,omitempty"`
	TxInputsExt      []*protos.TxInputExt    `protobuf:"bytes,23,rep,name=tx_inputs_ext,json=txInputsExt,proto3" json:"tx_inputs_ext,omitempty"`
	TxOutputsExt     []*protos.TxOutputExt   `protobuf:"bytes,24,rep,name=tx_outputs_ext,json=txOutputsExt,proto3" json:"tx_outputs_ext,omitempty"`
	ContractRequests []*protos.InvokeRequest `protobuf:"bytes,25,rep,name=contract_requests,json=contractRequests,proto3" json:"contract_requests,omitempty"`
	// 权限系统新增字段
	// 交易发起者, 可以是一个Address或者一个Account
	Initiator string `protobuf:"bytes,26,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
	AuthRequire []string `protobuf:"bytes,27,rep,name=auth_require,json=authRequire,proto3" json:"auth_require,omitempty"`
	// 交易发起者对交易元数据签名，签名的内容包括auth_require字段
	InitiatorSigns []*protos.SignatureInfo `protobuf:"bytes,28,rep,name=initiator_signs,json=initiatorSigns,proto3" json:"initiator_signs,omitempty"`
	// 收集到的签名
	AuthRequireSigns []*protos.SignatureInfo `protobuf:"bytes,29,rep,name=auth_require_signs,json=authRequireSigns,proto3" json:"auth_require_signs,omitempty"`
	// 节点收到tx的时间戳，不参与签名
	ReceivedTimestamp int64 `protobuf:"varint,30,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	// 统一签名(支持多重签名/环签名等，与initiator_signs/auth_require_signs不同时使用)
	XuperSign *XuperSignature `protobuf:"bytes,31,opt,name=xuper_sign,json=xuperSign,proto3" json:"xuper_sign,omitempty"`
	// 可修改区块链标记
	ModifyBlock *ModifyBlock `protobuf:"bytes,32,opt,name=modify_block,json=modifyBlock,proto3" json:"modify_block,omitempty"`
	// HD加解密相关信息
	HDInfo *HDInfo `protobuf:"bytes,33,opt,name=HD_info,json=HDInfo,proto3" json:"HD_info,omitempty"`
	//投票奖励
	VoteCoinbase bool `protobuf:"varint,34,opt,name=vote_coinbase,json=voteCoinbase,proto3" json:"vote_coinbase,omitempty"`
	//解冻，凭空产生的消耗
	ThawCoinbase bool `protobuf:"varint,35,opt,name=thaw_coinbase,json=thawCoinbase,proto3" json:"thaw_coinbase,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{5}
}

func (x *Transaction) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *Transaction) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *Transaction) GetTxInputs() []*protos.TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *Transaction) GetTxOutputs() []*protos.TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *Transaction) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Transaction) GetCoinbase() bool {
	if x != nil {
		return x.Coinbase
	}
	return false
}

func (x *Transaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetAutogen() bool {
	if x != nil {
		return x.Autogen
	}
	return false
}

func (x *Transaction) GetTxInputsExt() []*protos.TxInputExt {
	if x != nil {
		return x.TxInputsExt
	}
	return nil
}

func (x *Transaction) GetTxOutputsExt() []*protos.TxOutputExt {
	if x != nil {
		return x.TxOutputsExt
	}
	return nil
}

func (x *Transaction) GetContractRequests() []*protos.InvokeRequest {
	if x != nil {
		return x.ContractRequests
	}
	return nil
}

func (x *Transaction) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *Transaction) GetAuthRequire() []string {
	if x != nil {
		return x.AuthRequire
	}
	return nil
}

func (x *Transaction) GetInitiatorSigns() []*protos.SignatureInfo {
	if x != nil {
		return x.InitiatorSigns
	}
	return nil
}

func (x *Transaction) GetAuthRequireSigns() []*protos.SignatureInfo {
	if x != nil {
		return x.AuthRequireSigns
	}
	return nil
}

func (x *Transaction) GetReceivedTimestamp() int64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *Transaction) GetXuperSign() *XuperSignature {
	if x != nil {
		return x.XuperSign
	}
	return nil
}

func (x *Transaction) GetModifyBlock() *ModifyBlock {
	if x != nil {
		return x.ModifyBlock
	}
	return nil
}

func (x *Transaction) GetHDInfo() *HDInfo {
	if x != nil {
		return x.HDInfo
	}
	return nil
}

func (x *Transaction) GetVoteCoinbase() bool {
	if x != nil {
		return x.VoteCoinbase
	}
	return false
}

func (x *Transaction) GetThawCoinbase() bool {
	if x != nil {
		return x.ThawCoinbase
	}
	return false
}

// Ledger metadata
type LedgerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root block id
	RootBlockid []byte `protobuf:"bytes,1,opt,name=root_blockid,json=rootBlockid,proto3" json:"root_blockid,omitempty"`
	// tip block id
	TipBlockid []byte `protobuf:"bytes,2,opt,name=tip_blockid,json=tipBlockid,proto3" json:"tip_blockid,omitempty"`
	// the height of the trunk
	TrunkHeight int64 `protobuf:"varint,3,opt,name=trunk_height,json=trunkHeight,proto3" json:"trunk_height,omitempty"`
}

func (x *LedgerMeta) Reset() {
	*x = LedgerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerMeta) ProtoMessage() {}

func (x *LedgerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerMeta.ProtoReflect.Descriptor instead.
func (*LedgerMeta) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{6}
}

func (x *LedgerMeta) GetRootBlockid() []byte {
	if x != nil {
		return x.RootBlockid
	}
	return nil
}

func (x *LedgerMeta) GetTipBlockid() []byte {
	if x != nil {
		return x.TipBlockid
	}
	return nil
}

func (x *LedgerMeta) GetTrunkHeight() int64 {
	if x != nil {
		return x.TrunkHeight
	}
	return 0
}

// Utxo metadata
type UtxoMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// utxo vm目前执行到的blockid
	LatestBlockid []byte   `protobuf:"bytes,1,opt,name=latest_blockid,json=latestBlockid,proto3" json:"latest_blockid,omitempty"`
	LockKeyList   []string `protobuf:"bytes,2,rep,name=lock_key_list,json=lockKeyList,proto3" json:"lock_key_list,omitempty"`
	// 当前utxo vm上的总资产
	UtxoTotal string `protobuf:"bytes,3,opt,name=utxo_total,json=utxoTotal,proto3" json:"utxo_total,omitempty"`
	// 平均上链延时
	AvgDelay int64 `protobuf:"varint,4,opt,name=avgDelay,proto3" json:"avgDelay,omitempty"`
	// 待确认交易量
	UnconfirmTxAmount int64 `protobuf:"varint,5,opt,name=unconfirmTxAmount,proto3" json:"unconfirmTxAmount,omitempty"`
	// max block size
	MaxBlockSize int64 `protobuf:"varint,6,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`
	// preset contracts
	ReservedContracts []*protos.InvokeRequest `protobuf:"bytes,7,rep,name=reserved_contracts,json=reservedContracts,proto3" json:"reserved_contracts,omitempty"`
	// reset forbidden contract configuration
	ForbiddenContract *protos.InvokeRequest `protobuf:"bytes,8,opt,name=forbidden_contract,json=forbiddenContract,proto3" json:"forbidden_contract,omitempty"`
	// the resource amount of creating an account
	NewAccountResourceAmount int64 `protobuf:"varint,9,opt,name=new_account_resource_amount,json=newAccountResourceAmount,proto3" json:"new_account_resource_amount,omitempty"`
	// 当前不可逆区块高度，与utxo对齐
	IrreversibleBlockHeight int64 `protobuf:"varint,10,opt,name=irreversibleBlockHeight,proto3" json:"irreversibleBlockHeight,omitempty"`
	// 当前不可逆区块高度调整窗口
	IrreversibleSlideWindow int64            `protobuf:"varint,11,opt,name=irreversibleSlideWindow,proto3" json:"irreversibleSlideWindow,omitempty"`
	GasPrice                *protos.GasPrice `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	// 群组合约相关
	GroupChainContract *protos.InvokeRequest `protobuf:"bytes,13,opt,name=group_chain_contract,json=groupChainContract,proto3" json:"group_chain_contract,omitempty"`
	// 出块奖励
	Award string `protobuf:"bytes,14,opt,name=award,proto3" json:"award,omitempty"`
	// 转账手续费
	TransferFeeAmount int64 `protobuf:"varint,15,opt,name=transfer_fee_amount,json=transferFeeAmount,proto3" json:"transfer_fee_amount,omitempty"`
}

func (x *UtxoMeta) Reset() {
	*x = UtxoMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoMeta) ProtoMessage() {}

func (x *UtxoMeta) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoMeta.ProtoReflect.Descriptor instead.
func (*UtxoMeta) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{7}
}

func (x *UtxoMeta) GetLatestBlockid() []byte {
	if x != nil {
		return x.LatestBlockid
	}
	return nil
}

func (x *UtxoMeta) GetLockKeyList() []string {
	if x != nil {
		return x.LockKeyList
	}
	return nil
}

func (x *UtxoMeta) GetUtxoTotal() string {
	if x != nil {
		return x.UtxoTotal
	}
	return ""
}

func (x *UtxoMeta) GetAvgDelay() int64 {
	if x != nil {
		return x.AvgDelay
	}
	return 0
}

func (x *UtxoMeta) GetUnconfirmTxAmount() int64 {
	if x != nil {
		return x.UnconfirmTxAmount
	}
	return 0
}

func (x *UtxoMeta) GetMaxBlockSize() int64 {
	if x != nil {
		return x.MaxBlockSize
	}
	return 0
}

func (x *UtxoMeta) GetReservedContracts() []*protos.InvokeRequest {
	if x != nil {
		return x.ReservedContracts
	}
	return nil
}

func (x *UtxoMeta) GetForbiddenContract() *protos.InvokeRequest {
	if x != nil {
		return x.ForbiddenContract
	}
	return nil
}

func (x *UtxoMeta) GetNewAccountResourceAmount() int64 {
	if x != nil {
		return x.NewAccountResourceAmount
	}
	return 0
}

func (x *UtxoMeta) GetIrreversibleBlockHeight() int64 {
	if x != nil {
		return x.IrreversibleBlockHeight
	}
	return 0
}

func (x *UtxoMeta) GetIrreversibleSlideWindow() int64 {
	if x != nil {
		return x.IrreversibleSlideWindow
	}
	return 0
}

func (x *UtxoMeta) GetGasPrice() *protos.GasPrice {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *UtxoMeta) GetGroupChainContract() *protos.InvokeRequest {
	if x != nil {
		return x.GroupChainContract
	}
	return nil
}

func (x *UtxoMeta) GetAward() string {
	if x != nil {
		return x.Award
	}
	return ""
}

func (x *UtxoMeta) GetTransferFeeAmount() int64 {
	if x != nil {
		return x.TransferFeeAmount
	}
	return 0
}

// The internal block struct
type InternalBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block version
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Random number used to avoid replay attacks
	Nonce int32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// blockid generate the hash sign of the block used by sha256
	Blockid []byte `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	// pre_hash is the parent blockid of the block
	PreHash []byte `protobuf:"bytes,4,opt,name=pre_hash,json=preHash,proto3" json:"pre_hash,omitempty"`
	// The miner id
	Proposer []byte `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// The sign which miner signed: blockid + nonce + timestamp
	Sign []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	// The pk of the miner
	Pubkey []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The Merkle Tree root
	MerkleRoot []byte `protobuf:"bytes,8,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The height of the blockchain
	Height int64 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// Timestamp of the block
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transactions of the block, only txid stored on kv, the detail information
	// stored in another table
	Transactions []*Transaction `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The transaction count of the block
	TxCount int32 `protobuf:"varint,12,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// 所有交易hash的merkle tree
	MerkleTree  [][]byte          `protobuf:"bytes,13,rep,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
	CurTerm     int64             `protobuf:"varint,16,opt,name=curTerm,proto3" json:"curTerm,omitempty"`
	CurBlockNum int64             `protobuf:"varint,17,opt,name=curBlockNum,proto3" json:"curBlockNum,omitempty"`
	FailedTxs   map[string]string `protobuf:"bytes,18,rep,name=failed_txs,json=failedTxs,proto3" json:"failed_txs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // txid -> failed reason
	TargetBits  int32             `protobuf:"varint,19,opt,name=targetBits,proto3" json:"targetBits,omitempty"`
	// Justify used in chained-bft
	Justify *QuorumCert `protobuf:"bytes,20,opt,name=Justify,proto3" json:"Justify,omitempty"`
	// 下面的属性会动态变化
	// If the block is on the trunk
	InTrunk bool `protobuf:"varint,14,opt,name=in_trunk,json=inTrunk,proto3" json:"in_trunk,omitempty"`
	// Next next block which on trunk
	NextHash []byte `protobuf:"bytes,15,opt,name=next_hash,json=nextHash,proto3" json:"next_hash,omitempty"`
}

func (x *InternalBlock) Reset() {
	*x = InternalBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalBlock) ProtoMessage() {}

func (x *InternalBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalBlock.ProtoReflect.Descriptor instead.
func (*InternalBlock) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{8}
}

func (x *InternalBlock) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InternalBlock) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *InternalBlock) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

func (x *InternalBlock) GetPreHash() []byte {
	if x != nil {
		return x.PreHash
	}
	return nil
}

func (x *InternalBlock) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *InternalBlock) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *InternalBlock) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *InternalBlock) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *InternalBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *InternalBlock) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InternalBlock) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *InternalBlock) GetTxCount() int32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *InternalBlock) GetMerkleTree() [][]byte {
	if x != nil {
		return x.MerkleTree
	}
	return nil
}

func (x *InternalBlock) GetCurTerm() int64 {
	if x != nil {
		return x.CurTerm
	}
	return 0
}

func (x *InternalBlock) GetCurBlockNum() int64 {
	if x != nil {
		return x.CurBlockNum
	}
	return 0
}

func (x *InternalBlock) GetFailedTxs() map[string]string {
	if x != nil {
		return x.FailedTxs
	}
	return nil
}

func (x *InternalBlock) GetTargetBits() int32 {
	if x != nil {
		return x.TargetBits
	}
	return 0
}

func (x *InternalBlock) GetJustify() *QuorumCert {
	if x != nil {
		return x.Justify
	}
	return nil
}

func (x *InternalBlock) GetInTrunk() bool {
	if x != nil {
		return x.InTrunk
	}
	return false
}

func (x *InternalBlock) GetNextHash() []byte {
	if x != nil {
		return x.NextHash
	}
	return nil
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	ToAddr    []byte `protobuf:"bytes,2,opt,name=toAddr,proto3" json:"toAddr,omitempty"`
	ToPubkey  []byte `protobuf:"bytes,3,opt,name=toPubkey,proto3" json:"toPubkey,omitempty"`
	RefTxid   []byte `protobuf:"bytes,4,opt,name=refTxid,proto3" json:"refTxid,omitempty"`
	RefOffset int32  `protobuf:"varint,5,opt,name=refOffset,proto3" json:"refOffset,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{9}
}

func (x *Utxo) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Utxo) GetToAddr() []byte {
	if x != nil {
		return x.ToAddr
	}
	return nil
}

func (x *Utxo) GetToPubkey() []byte {
	if x != nil {
		return x.ToPubkey
	}
	return nil
}

func (x *Utxo) GetRefTxid() []byte {
	if x != nil {
		return x.RefTxid
	}
	return nil
}

func (x *Utxo) GetRefOffset() int32 {
	if x != nil {
		return x.RefOffset
	}
	return 0
}

type ModifyBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// txid交易被effective_txid的交易提出可修改区块链的请求
	EffectiveTxid string `protobuf:"bytes,1,opt,name=effective_txid,json=effectiveTxid,proto3" json:"effective_txid,omitempty"`
	// 本交易是否已被修改标记
	Marked bool `protobuf:"varint,2,opt,name=marked,proto3" json:"marked,omitempty"`
	// txid交易被修改生效的高度
	EffectiveHeight int64 `protobuf:"varint,3,opt,name=effective_height,json=effectiveHeight,proto3" json:"effective_height,omitempty"`
	// 监管的public key
	PublicKey string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// 监管地址对修改的交易id的签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *ModifyBlock) Reset() {
	*x = ModifyBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlock) ProtoMessage() {}

func (x *ModifyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlock.ProtoReflect.Descriptor instead.
func (*ModifyBlock) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyBlock) GetEffectiveTxid() string {
	if x != nil {
		return x.EffectiveTxid
	}
	return ""
}

func (x *ModifyBlock) GetMarked() bool {
	if x != nil {
		return x.Marked
	}
	return false
}

func (x *ModifyBlock) GetEffectiveHeight() int64 {
	if x != nil {
		return x.EffectiveHeight
	}
	return 0
}

func (x *ModifyBlock) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ModifyBlock) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type TxDataAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// 金额
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// 冻结高度
	FrozenHeight int64 `protobuf:"varint,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
}

func (x *TxDataAccount) Reset() {
	*x = TxDataAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataAccount) ProtoMessage() {}

func (x *TxDataAccount) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataAccount.ProtoReflect.Descriptor instead.
func (*TxDataAccount) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{11}
}

func (x *TxDataAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxDataAccount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TxDataAccount) GetFrozenHeight() int64 {
	if x != nil {
		return x.FrozenHeight
	}
	return 0
}

type UtxoRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoCount  string     `protobuf:"bytes,1,opt,name=utxoCount,proto3" json:"utxoCount,omitempty"`
	UtxoAmount string     `protobuf:"bytes,2,opt,name=utxoAmount,proto3" json:"utxoAmount,omitempty"`
	Item       []*UtxoKey `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *UtxoRecord) Reset() {
	*x = UtxoRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoRecord) ProtoMessage() {}

func (x *UtxoRecord) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoRecord.ProtoReflect.Descriptor instead.
func (*UtxoRecord) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{12}
}

func (x *UtxoRecord) GetUtxoCount() string {
	if x != nil {
		return x.UtxoCount
	}
	return ""
}

func (x *UtxoRecord) GetUtxoAmount() string {
	if x != nil {
		return x.UtxoAmount
	}
	return ""
}

func (x *UtxoRecord) GetItem() []*UtxoKey {
	if x != nil {
		return x.Item
	}
	return nil
}

type UtxoKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTxid string `protobuf:"bytes,1,opt,name=refTxid,proto3" json:"refTxid,omitempty"`
	Offset  string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Amount  string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UtxoKey) Reset() {
	*x = UtxoKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoKey) ProtoMessage() {}

func (x *UtxoKey) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoKey.ProtoReflect.Descriptor instead.
func (*UtxoKey) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{13}
}

func (x *UtxoKey) GetRefTxid() string {
	if x != nil {
		return x.RefTxid
	}
	return ""
}

func (x *UtxoKey) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *UtxoKey) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UtxoRecordDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenUtxo   *UtxoRecord `protobuf:"bytes,1,opt,name=openUtxo,proto3" json:"openUtxo,omitempty"`
	LockedUtxo *UtxoRecord `protobuf:"bytes,2,opt,name=lockedUtxo,proto3" json:"lockedUtxo,omitempty"`
	FrozenUtxo *UtxoRecord `protobuf:"bytes,3,opt,name=frozenUtxo,proto3" json:"frozenUtxo,omitempty"`
}

func (x *UtxoRecordDetail) Reset() {
	*x = UtxoRecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoRecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoRecordDetail) ProtoMessage() {}

func (x *UtxoRecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoRecordDetail.ProtoReflect.Descriptor instead.
func (*UtxoRecordDetail) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{14}
}

func (x *UtxoRecordDetail) GetOpenUtxo() *UtxoRecord {
	if x != nil {
		return x.OpenUtxo
	}
	return nil
}

func (x *UtxoRecordDetail) GetLockedUtxo() *UtxoRecord {
	if x != nil {
		return x.LockedUtxo
	}
	return nil
}

func (x *UtxoRecordDetail) GetFrozenUtxo() *UtxoRecord {
	if x != nil {
		return x.FrozenUtxo
	}
	return nil
}

type BalanceDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	IsFrozen bool   `protobuf:"varint,2,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`
}

func (x *BalanceDetailInfo) Reset() {
	*x = BalanceDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceDetailInfo) ProtoMessage() {}

func (x *BalanceDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceDetailInfo.ProtoReflect.Descriptor instead.
func (*BalanceDetailInfo) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{15}
}

func (x *BalanceDetailInfo) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *BalanceDetailInfo) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

// UtxoOutput query results
type UtxoOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// utxo list
	UtxoList []*Utxo `protobuf:"bytes,1,rep,name=utxoList,proto3" json:"utxoList,omitempty"`
	// total selected amount
	TotalSelected string `protobuf:"bytes,2,opt,name=totalSelected,proto3" json:"totalSelected,omitempty"`
}

func (x *UtxoOutput) Reset() {
	*x = UtxoOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoOutput) ProtoMessage() {}

func (x *UtxoOutput) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoOutput.ProtoReflect.Descriptor instead.
func (*UtxoOutput) Descriptor() ([]byte, []int) {
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP(), []int{16}
}

func (x *UtxoOutput) GetUtxoList() []*Utxo {
	if x != nil {
		return x.UtxoList
	}
	return nil
}

func (x *UtxoOutput) GetTotalSelected() string {
	if x != nil {
		return x.TotalSelected
	}
	return ""
}

var File_bcs_ledger_xledger_xldgpb_xledger_proto protoreflect.FileDescriptor

var file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x63, 0x73, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2f, 0x78, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x78, 0x6c, 0x64, 0x67, 0x70,
	0x62, 0x1a, 0x1f, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x51, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x51, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70,
	0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x51, 0x43, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x22,
	0xc6, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x51, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70,
	0x62, 0x2e, 0x51, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x51, 0x0a, 0x06, 0x48, 0x44, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a, 0x0e, 0x58,
	0x75, 0x70, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc0, 0x07, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x78,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08,
	0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09,
	0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x67,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x52, 0x0b, 0x74, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a,
	0x0a, 0x78, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x58, 0x75, 0x70, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x78, 0x75, 0x70, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x64,
	0x67, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x07,
	0x48, 0x44, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x48,
	0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68,
	0x61, 0x77, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x74, 0x68, 0x61, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x73, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xe0, 0x05, 0x0a, 0x08, 0x55, 0x74, 0x78, 0x6f, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x74, 0x78, 0x6f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x76, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x38, 0x0a, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x43,
	0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x78, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x55, 0x74, 0x78, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x6f, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0x66, 0x0a, 0x0d, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6f, 0x0a, 0x0a, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x78, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x78, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x53, 0x0a, 0x07, 0x55, 0x74,
	0x78, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x54, 0x78, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x78, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xaa, 0x01, 0x0a, 0x10, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x74, 0x78, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e,
	0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x55, 0x74, 0x78, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x74,
	0x78, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70,
	0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78,
	0x6c, 0x64, 0x67, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x22, 0x49, 0x0a, 0x11,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x0a, 0x55, 0x74, 0x78, 0x6f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62,
	0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x2a, 0x77, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x58,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x58, 0x5f, 0x4e, 0x4f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x58, 0x5f, 0x46, 0x55, 0x52, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x54,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x07, 0x51, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x43, 0x49, 0x44, 0x45,
	0x10, 0x04, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x62, 0x63, 0x73, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x78, 0x6c, 0x64, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescOnce sync.Once
	file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescData = file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDesc
)

func file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescGZIP() []byte {
	file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescOnce.Do(func() {
		file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescData)
	})
	return file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDescData
}

var file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_bcs_ledger_xledger_xldgpb_xledger_proto_goTypes = []interface{}{
	(TransactionStatus)(0),       // 0: xldgpb.TransactionStatus
	(BlockStatus)(0),             // 1: xldgpb.BlockStatus
	(QCState)(0),                 // 2: xldgpb.QCState
	(*QCSignInfos)(nil),          // 3: xldgpb.QCSignInfos
	(*SignInfo)(nil),             // 4: xldgpb.SignInfo
	(*QuorumCert)(nil),           // 5: xldgpb.QuorumCert
	(*HDInfo)(nil),               // 6: xldgpb.HDInfo
	(*XuperSignature)(nil),       // 7: xldgpb.XuperSignature
	(*Transaction)(nil),          // 8: xldgpb.Transaction
	(*LedgerMeta)(nil),           // 9: xldgpb.LedgerMeta
	(*UtxoMeta)(nil),             // 10: xldgpb.UtxoMeta
	(*InternalBlock)(nil),        // 11: xldgpb.InternalBlock
	(*Utxo)(nil),                 // 12: xldgpb.Utxo
	(*ModifyBlock)(nil),          // 13: xldgpb.ModifyBlock
	(*TxDataAccount)(nil),        // 14: xldgpb.TxDataAccount
	(*UtxoRecord)(nil),           // 15: xldgpb.UtxoRecord
	(*UtxoKey)(nil),              // 16: xldgpb.UtxoKey
	(*UtxoRecordDetail)(nil),     // 17: xldgpb.UtxoRecordDetail
	(*BalanceDetailInfo)(nil),    // 18: xldgpb.BalanceDetailInfo
	(*UtxoOutput)(nil),           // 19: xldgpb.UtxoOutput
	nil,                          // 20: xldgpb.InternalBlock.FailedTxsEntry
	(*protos.TxInput)(nil),       // 21: protos.TxInput
	(*protos.TxOutput)(nil),      // 22: protos.TxOutput
	(*protos.TxInputExt)(nil),    // 23: protos.TxInputExt
	(*protos.TxOutputExt)(nil),   // 24: protos.TxOutputExt
	(*protos.InvokeRequest)(nil), // 25: protos.InvokeRequest
	(*protos.SignatureInfo)(nil), // 26: protos.SignatureInfo
	(*protos.GasPrice)(nil),      // 27: protos.GasPrice
}
var file_bcs_ledger_xledger_xldgpb_xledger_proto_depIdxs = []int32{
	4,  // 0: xldgpb.QCSignInfos.QCSignInfos:type_name -> xldgpb.SignInfo
	2,  // 1: xldgpb.QuorumCert.Type:type_name -> xldgpb.QCState
	3,  // 2: xldgpb.QuorumCert.SignInfos:type_name -> xldgpb.QCSignInfos
	21, // 3: xldgpb.Transaction.tx_inputs:type_name -> protos.TxInput
	22, // 4: xldgpb.Transaction.tx_outputs:type_name -> protos.TxOutput
	23, // 5: xldgpb.Transaction.tx_inputs_ext:type_name -> protos.TxInputExt
	24, // 6: xldgpb.Transaction.tx_outputs_ext:type_name -> protos.TxOutputExt
	25, // 7: xldgpb.Transaction.contract_requests:type_name -> protos.InvokeRequest
	26, // 8: xldgpb.Transaction.initiator_signs:type_name -> protos.SignatureInfo
	26, // 9: xldgpb.Transaction.auth_require_signs:type_name -> protos.SignatureInfo
	7,  // 10: xldgpb.Transaction.xuper_sign:type_name -> xldgpb.XuperSignature
	13, // 11: xldgpb.Transaction.modify_block:type_name -> xldgpb.ModifyBlock
	6,  // 12: xldgpb.Transaction.HD_info:type_name -> xldgpb.HDInfo
	25, // 13: xldgpb.UtxoMeta.reserved_contracts:type_name -> protos.InvokeRequest
	25, // 14: xldgpb.UtxoMeta.forbidden_contract:type_name -> protos.InvokeRequest
	27, // 15: xldgpb.UtxoMeta.gasPrice:type_name -> protos.GasPrice
	25, // 16: xldgpb.UtxoMeta.group_chain_contract:type_name -> protos.InvokeRequest
	8,  // 17: xldgpb.InternalBlock.transactions:type_name -> xldgpb.Transaction
	20, // 18: xldgpb.InternalBlock.failed_txs:type_name -> xldgpb.InternalBlock.FailedTxsEntry
	5,  // 19: xldgpb.InternalBlock.Justify:type_name -> xldgpb.QuorumCert
	16, // 20: xldgpb.UtxoRecord.item:type_name -> xldgpb.UtxoKey
	15, // 21: xldgpb.UtxoRecordDetail.openUtxo:type_name -> xldgpb.UtxoRecord
	15, // 22: xldgpb.UtxoRecordDetail.lockedUtxo:type_name -> xldgpb.UtxoRecord
	15, // 23: xldgpb.UtxoRecordDetail.frozenUtxo:type_name -> xldgpb.UtxoRecord
	12, // 24: xldgpb.UtxoOutput.utxoList:type_name -> xldgpb.Utxo
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_bcs_ledger_xledger_xldgpb_xledger_proto_init() }
func file_bcs_ledger_xledger_xldgpb_xledger_proto_init() {
	if File_bcs_ledger_xledger_xldgpb_xledger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QCSignInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XuperSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoRecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bcs_ledger_xledger_xldgpb_xledger_proto_goTypes,
		DependencyIndexes: file_bcs_ledger_xledger_xldgpb_xledger_proto_depIdxs,
		EnumInfos:         file_bcs_ledger_xledger_xldgpb_xledger_proto_enumTypes,
		MessageInfos:      file_bcs_ledger_xledger_xldgpb_xledger_proto_msgTypes,
	}.Build()
	File_bcs_ledger_xledger_xldgpb_xledger_proto = out.File
	file_bcs_ledger_xledger_xldgpb_xledger_proto_rawDesc = nil
	file_bcs_ledger_xledger_xldgpb_xledger_proto_goTypes = nil
	file_bcs_ledger_xledger_xldgpb_xledger_proto_depIdxs = nil
}
